--[[
beam system for shear analogy method
(c) 2012 Michael Fuchs michfu@gmx.at

@TODO:

@DID:
* G, kser only for certain sections
* setter/getter für werte?
* status des systems speicher: berechnet oder nicht? (zB nach ändern eines Parameters)
* y => z für SA
* hb, moe, mos, rho in ein array
* fugensteifigkeit für fugen (k_ser?)
* Spannungen gleich für alle Elemente brechnen??
--]]

dofile("crosssection.tng")

-- ====================== init the structure ====================== 
function SA_init(l, noe)
	SA_calcSystem = false
	SA_screws = false
	
	if l ~= nil then SA_l = l
		else SA_l = 7.2 
	end
	if noe ~= nil then noe = SA_noe
		else SA_noe = 30
	end
	
	SA_refnnr = 1

	-- Properties for reference material
	local E_cal = 1e10 -- [N/m²]
	local nu_cal = 0.2
	local G_cal = E_cal/(2*(1 + nu_cal))
	SA_calProp = tmath.Matrix({{E_cal, nu_cal, G_cal}})

	SA_nodes = createNodes()
	-- append refernce node
	SA_nodes = SA_nodes:AppendRows(tmath.Matrix({{SA_refnnr, 0, 1, 0}}))
	-- @TODO create elements from nodes Matrix, no need to manually calc nodenumbers again
	SA_elementsA, SA_elementsB = createElements()
	SA_constraints = createConstraints()

end


function setLayers(layers, joints)
-- layer array of {thick, width, moe, mos, rho}
-- layer joints of {thick, width, k_ser}
	SA_layers = layers
	if joints == nil then
		SA_joints = tmath.Matrix(3, layers:Rows()-1)
		SA_joints:SetZero()
	else
		SA_joints = joints
	end
	SA_calcSystem = false
end

function setLoads(deadLoadFactor, varLoad, Fx)
-- apply load to nodes
  SA_nodeLoad = (deadLoad(hb, rho)*deadLoadFactor + varLoad)*SA_l/SA_noe
  SA_Fx = Fx
	SA_calcSystem = false
end

function setScrews(k_ser_scr, l_scr, n_scr, numLay)
	-- l_scr distance first/last screw
	-- n_scr number of screws within distance
	-- k_ser_scr (Verschiebungsmodul einer Schraube)
	-- numLay ... number of affected layer (2)
	if k_ser_scr ~= nil then
		SA_screws = true
		SA_mos_scr = k_ser_scr*n_scr*layers[{numLay-1,0}]/(layers[{numLay-1,1}]*l_scr)
		-- print("Schubmodul f Schrauben", SA_mos_scr, SA_mos_scr/SA_layers[{numLay-1,3}])
		SA_numLay_scr = numLay
		SA_l_scr = l_scr
		SA_numEl_scr = math.floor(l_scr/(SA_l/SA_noe) + .5)
		SA_elementsScrews0 = SA_elementsB:GetRows(0,SA_numEl_scr)
		SA_elementsScrewsl = SA_elementsB:GetRows(SA_noe-SA_numEl_scr, SA_numEl_scr)
		SA_elementsNoScrews = SA_elementsB:GetRows(SA_numEl_scr, SA_noe-2*SA_numEl_scr)
	end
end
-- ====================== internal Functions ====================== 
function createNodes()
  local dx = SA_l/SA_noe
  local dy = SA_l/5
  local nodes_a = tmath.Matrix(SA_noe+1, 4)
  local nodes_b = tmath.Matrix(SA_noe+1, 4)
  
  for i = 0, SA_noe do
    nodes_a[i] = tmath.Matrix({{1000 + i, i*dx, 0, 0}})
    nodes_b[i] = tmath.Matrix({{2000 + i, i*dx, -dy, 0}})
  end
  
  return nodes_a:AppendRows(nodes_b)
end

function createElements()
  local el_a = tmath.Matrix(SA_noe, 4)
  local el_b = tmath.Matrix(SA_noe, 4)
  
  for i = 0, SA_noe-1 do
    el_a[i] = tmath.Matrix({{1000 + i, 1000 + i, 1001 + i, SA_refnnr}})
    el_b[i] = tmath.Matrix({{2000 + i, 2000 + i, 2001 + i, SA_refnnr}})
  end
  
  return el_a, el_b
end

function createConstraints()
-- same deflection for Beam A and B
  local c = tmath.Matrix(SA_noe-1, 7)
  for i = 1, SA_noe-1 do
    c[i-1] = tmath.Matrix({{2, 1000+i, 1, -1, 2000+i, 1, 1}})
  end
  return c
end

function stiffnessBeamA(layers)

  local h, b, moe, mos = layers:GetCols(0), layers:GetCols(1), layers:GetCols(2), layers:GetCols(3)
  local hb = h:AppendCols(b)
  
  local eaa = tmath.Sum(moe:CW()*A(hb))
  local gaa = tmath.Sum(mos:CW()*A(hb))
  local eia = tmath.Sum((moe:CW()*b):CW()*(h:CW()^3))/12
	-- print(eia)
  return eaa, gaa, eia
end

function sectionPropertiesBeamA()
--   calculates properties for section A
  local eaa, gaa, eia = stiffnessBeamA(SA_layers) --sollte eigentlich in eigene section C
-- x,y,z in CSYS from FEM
  local A_x = eaa/SA_calProp[0]*0.01  --can be 0
  local A_y = gaa/SA_calProp[2] --can be oo
  local A_z = A_y
  local I_z = eia/SA_calProp[0] --important part
  local I_y = I_z --??
  local I_x = I_y*2 --??
  return tmath.Matrix({{A_x, A_y, A_z, I_x, I_y, I_z}})
end


function stiffnessBeamB(layers, joints)

  local n = layers:Rows()
  local h, b, moe, mos = layers:GetCols(0), layers:GetCols(1), layers:GetCols(2), layers:GetCols(3)
  local hb = h:AppendCols(b)
  local kser = joints:GetCols(2)
  -- print(mos)
	
  local z_s = z__s(hb, moe)
  local ei = tmath.Sum((moe:CW()*A(hb)):CW()*(z_s:CW()^2))
  
  local s_den = 0  -- denominator for ersatz shear stiffness
  for i = 0, mos:Rows()-1 do
		if mos[i] > 0 then
			s_den = s_den + h[i]/(mos[i]*b[i])
			-- print(s_den)
		end
  end
  for i = 0, kser:Rows()-1 do
		if kser[i] > 0 then
			s_den = s_den + 1/kser[i]
			-- print(s_den)
		end
  end
  local s = a__tot(h)^2/s_den
  
  return 0, s, ei
end


function sectionPropertiesBeamB(screws)
--   calculates properties for section B
  local layers = SA_layers
	if screws then
		layers[{SA_numLay_scr-1,3}] = SA_mos_scr
	end
  local eab, gab, eib = stiffnessBeamB(layers, SA_joints)
  local A_y = gab/SA_calProp[2]
  local A = A_y  --can be 0
  local A_z = A_y
  local I_z = eib/SA_calProp[0]
  local I_y = I_z
  local I_x = I_z*0.001
  return tmath.Matrix({{A, A_y, A_z, I_x, I_y, I_z}})
end


function getDisplacements()

	--   get maximum deflection
  --nummer der Zeile des Knotens nnr in U1 or F1 struct:GetNodeIndex(nnr) 
  --Maximum einer Matrix: val,z,s = A:MaxCoeff()
  local u_max, z ,s = SA_U:MaxCoeff()
	
	-- u(x)
	local u_x = tmath.Matrix(SA_noe + 1, 1)
	u_x:SetLinearRows(0, SA_l)
	u_x = u_x:AppendCols(SA_U)
  return u_x, u_max
end

function getShearForces()
	local Qz = tmath.Matrix(SA_noe, 1)
	Qz:SetLinearRows(0, SA_l)
	Qz = Qz:AppendCols(SA_elementForcesA:GetCols(1))
	Qz = Qz:AppendCols(SA_elementForcesB:GetCols(1))
	return Qz
end

function getMaxShearStressPathX(layNum)
	local tau_max = SA_sig:GetCols(0)
	tau_max = tau_max:AppendCols(SA_sig:GetCols((layNum-1)*6 + 6))
	return tau_max
end

function getStresses(x)
  local nol = SA_layers:Rows()
  local h, b, moe, mos = SA_layers:GetCols(0), SA_layers:GetCols(1), SA_layers:GetCols(2), SA_layers:GetCols(3)
  local hb = h:AppendCols(b)
  
	local nodeNr = math.floor(x*SA_noe + .5)
	local M_y_A = -SA_elementForcesA[{nodeNr, 5}]
	local M_y_B = -SA_elementForcesB[{nodeNr, 5}]
  local Q_z_A = SA_elementForcesA[{nodeNr, 1}]
  local Q_z_B = SA_elementForcesB[{nodeNr, 1}]
	
  local eaa, gaa, eia = stiffnessBeamA(SA_layers)
  local eab, gab, eib = stiffnessBeamB(SA_layers, SA_joints)
  local z_s = z__s(hb, moe)
	-- print(z_s)
  local sig = tmath.Matrix(nol,6)
  local t0 = 0
	local sig_m, sig_n, ta, tb
	
  for i = 0, nol-1 do
    sig_m = M_y_A/eia*moe[i]*h[i]/2
    sig_n = M_y_B/eib*moe[i]*z_s[i]
    sig[{i,0}] = sig_n - sig_m
    sig[{i,1}] = sig_n + sig_m
		-- t0 = t0/b[i]
    ta = (-Q_z_A*moe[i]/eia*(-h[i]^2/8))*b[i]
    tb = (-Q_z_B*moe[i]/eib*z_s[i]*(h[i]/2 + h[i]/2))*b[i]
		-- tau_o
    sig[{i,2}] = t0/b[i]
		-- tau_m
    sig[{i,3}] = (ta + tb/2 + t0)/b[i]
		-- tau_u
    sig[{i,4}] = (tb + t0)/b[i]
	-- Ermittlung tau_max
	-- Parameter für Parabel
		local az = (sig[{i,2}] + sig[{i,4}] - 2*sig[{i,3}])/(2*(h[i]/2)^2) 
		local bz = (sig[{i,4}] - sig[{i,2}])/h[i]
		local cz = sig[{i,3}]
		-- Lage tau_max
		local z_tmax = -bz/(2*az)
		-- print("z_tmax", z_tmax)
		-- print("h[i]/2", h[i]/2)
		if math.abs(z_tmax) > h[i]/2 then
			sig[{i,5}] = math.max(sig[{i,2}], sig[{i,4}])
		else
			sig[{i,5}] = -Q_z_A*moe[i]/eia*(z_tmax^2/2 - h[i]^2/8) 
				- Q_z_B*moe[i]/eib*z_s[i]*(z_tmax + h[i]/2) + t0/b[i]
		end
			
		t0 = tb + t0 -- Schubfluss in der Fuge
  end
  	
	return sig 
end

function calcStresses()
  local nol = SA_layers:Rows()
  local h, b, moe, mos = SA_layers:GetCols(0), SA_layers:GetCols(1), SA_layers:GetCols(2), SA_layers:GetCols(3)
  local hb = h:AppendCols(b)
  
	-- local nodeNr = math.floor(x*SA_noe + .5)
	local M_y_A = -SA_elementForcesA:GetCols(5)
	local M_y_B = -SA_elementForcesB:GetCols(5)
  local Q_z_A = SA_elementForcesA:GetCols(1)
  local Q_z_B = SA_elementForcesB:GetCols(1)
	
  local eaa, gaa, eia = stiffnessBeamA(SA_layers)
  local eab, gab, eib = stiffnessBeamB(SA_layers, SA_joints)
  local z_s = z__s(hb, moe)
	-- print(z_s)
	local sig = tmath.Matrix(SA_noe, 1)
	--set x values
	sig:SetLinearRows(0, SA_l)
  -- local sig_m, sig_n, ta, tb, 
	local t0 = tmath.Matrix(SA_noe)
	t0:SetZero()
	-- local sig_m, sig_n, ta, tb
	
  for i = 0, nol-1 do
    local sig_m = M_y_A*(moe[i]/eia*h[i]/2)
    local sig_n = M_y_B*(moe[i]/eib*z_s[i])
    local sig_o = sig_n - sig_m
    local sig_u = sig_n + sig_m
		-- t0 = t0/b[i]
    local ta = -Q_z_A*(moe[i]/eia*(-h[i]^2/8)*b[i])
    local tb = -Q_z_B*(moe[i]/eib*z_s[i]*(h[i]/2 + h[i]/2)*b[i])
		-- tau_o 2
    local tau_o = t0/b[i]
		-- tau_m 3
    local tau_m = (ta + tb/2 + t0)/b[i]
		-- tau_u 4
    local tau_u = (tb + t0)/b[i]
	-- Ermittlung tau_max
	-- Parameter für Parabel
		local az = (tau_o + tau_u - tau_m*2)/(2*(h[i]/2)^2)
		local bz = (tau_u - tau_o)/h[i]
		local cz = tau_m
		-- Lage tau_max
		local z_tmax = -(bz:CW()/(az*2))
		-- print("z_tmax", z_tmax)
		-- print("h[i]/2", h[i]/2)
		local tau_max = tmath.Matrix(SA_noe)
		for j = 0, SA_noe-1 do
			if math.abs(z_tmax[j]) > h[i]/2 then
			-- ???
				tau_max[j] = math.max(math.abs(tau_o[j]), math.abs(tau_u[j]))
			else
				tau_max[j] = -(Q_z_A[j])*moe[i]/eia*(z_tmax[j]^2/2 - h[i]^2/8) 
					- (Q_z_B[j])*moe[i]/eib*z_s[i]*(z_tmax[j] + h[i]/2) 
					+ t0[j]/b[i]
			end
		end
		t0 = tb + t0 -- Schubfluss in der Fuge
		sig = sig:AppendCols(sig_o)
		sig = sig:AppendCols(sig_u)
		sig = sig:AppendCols(tau_o)
		sig = sig:AppendCols(tau_m)
		sig = sig:AppendCols(tau_u)
		sig = sig:AppendCols(tau_max)
  end
	SA_sig = sig
end

-- -------------------------------- assemble it all together and calculate the system
function calcStructure()
-- solve system
  local struct = fem.Structure("Shear Analogy")
	
  struct:AddNodes(SA_nodes)

-- supports 	
--   fix reference node
  struct:GetNode(SA_refnnr):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 0}}))
--   define supports
  struct:GetNode(1000):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 1}}))
  struct:GetNode(2000):SetAvailDof(tmath.Matrix({{0, 0, 0, 0, 0, 1}}))
  struct:GetNode(1000+SA_noe):SetAvailDof(tmath.Matrix({{1, 0, 0, 0, 0, 1}}))
  struct:GetNode(2000+SA_noe):SetAvailDof(tmath.Matrix({{1, 0, 0, 0, 0, 1}}))

	-- Add Material
	local mm = struct:AddMaterial(1,"LINEAR_ELASTIC")
	mm:SetData(tmath.Matrix({{SA_calProp[0], SA_calProp[1], 3850}}))
	
	-- add crosssections
	-- beam A
	local ss = struct:AddSection(11, "BEAM3D", 0)
	ss:SetData(sectionPropertiesBeamA())
	
	-- beam B
	local ss = struct:AddSection(12, "BEAM3D", 0)
	-- print(sectionPropertiesBeamB())
	ss:SetData(sectionPropertiesBeamB())
	
	--screws
	if SA_screws then
		local ss = struct:AddSection(13, "BEAM3D", 0)
		-- print(sectionPropertiesBeamB(true))
		ss:SetData(sectionPropertiesBeamB(true))
  end
	-- add Elements
	-- beam A
  struct:AddElements("BEAM3D", 1, 11, SA_elementsA)
	-- beam B
	if SA_screws then
		struct:AddElements("BEAM3D", 1, 13, SA_elementsScrews0)
		struct:AddElements("BEAM3D", 1, 12, SA_elementsNoScrews)
		struct:AddElements("BEAM3D", 1, 13, SA_elementsScrewsl)
	else
		struct:AddElements("BEAM3D", 1, 12, SA_elementsB)
	end

-- Find global DOFs and assemble stiffness
  local nd = struct:GlobalDof()
--   add constraints between beam a and b
  struct:AddConstraints(SA_constraints)

-- get stiffness matrix
  local K = struct:SparseStiffness()
-- get a template for force vector
  local F1 = struct:GetAllDisplacements()

-- set forces, equal load
  for i = 2, SA_noe+1 do
		F1[{i,1}] = -SA_nodeLoad
  end
  
-- single loads
	if SA_Fx ~= nil then
		for i = 0, SA_Fx:Rows()-1 do
		  -- calculate node number (round)
			local nr = math.floor(SA_Fx[{i,0}]*SA_noe + .5)
			F1[{nr,1}] = F1[{nr,1}] - SA_Fx[{i,1}]
		end
	end

	-- format the force vector
  local F = struct:ToDofDisplacements(F1)

-- solve the system
  local U = K:SolveLU(F)
	SA_calcSystem = true

	-- apply deformations to structure (drawing)
	struct:SetDofDisplacements(U)

	local U1 = struct:ToAllDisplacements(U)
--   get deformations in y direction
  SA_U = U1:GetCols(1):GetRows(0,31)*(-1)
	
	
	-- @TODO write stresses and deformations into global vars for later use
  local elementList = tmath.Matrix(1, SA_noe)
	elementList:SetLinearCols(0, SA_noe-1)
-- Achtung: noch ein Bug, hier kommen 36 Spalten heraus, aber nur die ersten 12 sind sinvoll....
  SA_elementForcesA = struct:ElementForce(elementList):GetCols(0,12) 
	elementList:SetLinearCols(SA_noe, 2*SA_noe-1)
  SA_elementForcesB = struct:ElementForce(elementList):GetCols(0,12)
	calcStresses()
	
end