--[[ (c) Michael Fuchs 2013
    Gamma-Verfahren zusammengesetzte Querschnitte ]]--

dofile("crosssection.tng")


function gamma(hb, moe, cf, l)
  local gamma = tmath.Matrix(2)
  local E1 = moe[0]
  local A1 = A(hb)[0]
  gamma[0] = 1/(1+ math.pi^2*E1*A1/(cf*l^2))
  gamma[1] = 1
  return gamma
end

function jointStiff(hb, mos)
  local h = hb:GetCols(0)
  local b = hb:GetCols(1)
  return (mos:CW()*b):CW()/h
end

function gammaParameters(layers, joints, l)
  local moe12 = tmath.Matrix({moe:GetRows(0), moe:GetRows(2)})
  local hb12 = tmath.Matrix({hb:GetRows(0), hb:GetRows(2)})
  local EI12, SteinerAnt = MOI(hb12, moe12)
  local gamma = gamma(hb12, moe12, c_F[0], l)
  local A12 = A(hb12)
  local a_tot = a__tot(hb:GetCols(0))
  local a_two = gamma[0]*moe12[0]*A12[0]*a_tot/tmath.Sum((gamma:CW()*moe12):CW()*A12)
  local a = tmath.Matrix({{a_tot - a_two}, {a_two}})
  local EI_eff = tmath.Sum(EI12) + tmath.Sum(((gamma:CW()*moe12):CW()*A12):CW()*a:CW()^2)
  local EI_eff = tmath.Sum(EI12) + a_tot^2*gamma[0]*moe12[0]*A12[0]*moe12[1]*A12[1]/(gamma[0]*moe12[0]*A12[0]+moe12[1]*A12[1])
  return EI_eff, a, gamma
end

function w_distload(q, l, EI)
  return 5*q*l^4/(384*EI)
end

function w_single(P, l, EI)
  return P*l^3/(48*EI)
end

function normalStresses(M, hb, moe, c_F, l)
  local moe12 = tmath.Matrix({moe:GetRows(0), moe:GetRows(2)})
  local hb12 = tmath.Matrix({hb:GetRows(0), hb:GetRows(2)})
  local EI_eff, a, gamma = gammaParameters(hb, moe, c_F, l)
  local sig1n = gamma[0]*moe12[0]*a[0]*M/EI_eff
  local sig2n = gamma[1]*moe12[1]*a[1]*M/EI_eff
  local sig1m = moe12[0]*hb12[{0,0}]/2*M/EI_eff
  local sig2m = moe12[1]*hb12[{1,0}]/2*M/EI_eff
  local sig = tmath.Matrix(2, 3)
  -- normal stress
  sig[{0,0}] = -sig1n - sig1m
  sig[{0,1}] = -sig1n
  sig[{0,2}] = -sig1n + sig1m
  sig[{1,0}] = sig2n - sig2m
  sig[{1,1}] = sig2n
  sig[{1,2}] = sig2n + sig2m
 
  return sig
end

function shearStresses(V, hb, moe, c_F, l)
  local moe12 = tmath.Matrix({moe:GetRows(0), moe:GetRows(2)})
  local hb12 = tmath.Matrix({hb:GetRows(0), hb:GetRows(2)})
  local EI_eff, a, gamma = gammaParameters(hb, moe, c_F, l)

  local tau = tmath.Matrix(3)
  
  tau[{0,0}] = gamma[0]*moe[0]*hb12[{0,0}]*hb12[{0,1}]*a[0]/(EI_eff*hb[{0,1}])*V
  tau[{1,0}] = gamma[0]*moe[0]*hb12[{0,0}]*hb12[{0,1}]*a[0]/(EI_eff*hb[{1,1}])*V
  tau[{2,0}] = 0.5*moe12[1]*(hb12[{1,0}]/2 + a[1])^2/EI_eff*V
  
  return tau
end
-- main starts here --------------------
hb = tmath.Matrix({{6e-2, b}, {15e-2, b}, {11.8e-2, b}})
-- HLB Sandwich-Querschnitt ================
b = 50e-2 -- width of beam
l = 7.2
layers = tmath.Matrix({{hb:GetRows(0), 19560e6},
					   {hb:GetRows(2), 11600e6}})
-- Fuge
mos_F = 15e6 --mos of joint
c_F = mos_F*b/hb[{1,0}]
joints = tmath.Matrix({{hb:GetRows(1), c_F}})

rho = tmath.Matrix({{2400}, {750}, {470}}) --density [kg/m³]
q = 3000 --[N/m²]

M = (deadLoad(hb, rho) + q*b)*l^2/8
V = (deadLoad(hb, rho) + q*b)*l/2
print("stresses", normalStresses(M, hb, moe, c_F, l))
print("shear stresses", shearStresses(V, hb, moe, c_F, l))
-- HLB Sandwich-Querschnitt ================


-- Berechnungsbeispiel TU Graz
-- moe = tmath.Matrix({{12000e6}, {0}, {12000e6}}) -- MoE [N/m²]
-- hb = tmath.Matrix({{60e-3, 180e-3}, {0, 80e-3}, {240e-3, 80e-3}}) -- height of Layers 1 and 2
-- l = 4.5 --length of beam

-- K_u = 2341e3    --modulus of displacement [N/m]
-- s_eff = 43.75e-3  --effective distance of screws

-- c_F = tmath.Matrix({{K_u/s_eff}}) --Fugensteifigkeit

-- print("EIeff", gammaParameters(hb, moe, c_F, l)) --Lösung: 2,21e6 Nm²

-- M = 16.45e3
-- V = 14.6e3
-- print("stresses", normalStresses(M, hb, moe, c_F, l))
-- print("shear stresses", shearStresses(V, hb, moe, c_F, l))

